server.port=8888
spring.main.banner-mode=off
greeting-name = Greeting HenryECE is in application.propertise
greeting-coffee = ${greeting-name} is variable in application.propertise

greeting.name = Greeting HenryECE is in application.propertise mapped by ConfigurationProperties
greeting.coffee = ${greeting.name} is variable in application.propertise mapped by ConfigurationProperties

#id ans description of droid are environment variable that is mapped to methods in main class
droid.id = BB-8 
droid.description = Small, rolling droid. Does not drink coffee but oil!


#These are relating to actuator will be shown in the web browser
management.endpoints.web.exposure.include=*
#env, info, health
management.endpoint.health.show-details=always

#1. docker run -d --name henry_practise_psql -p 5432:5432 -e POSTGRES_PASSWORD=admin -e POSTGRES_USER=admin postgres
#2. root@java-bros:/home/henry# docker exec -ti henry_practise_psql psql -U admin
#3. admin=# create database mydb; otherwise cannot start the application properly
spring.datasource.platform=postgresql
spring.datasource.url= jdbc:postgresql://localhost:5432/admin
spring.datasource.username=admin
spring.datasource.password=admin

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (creatlocae, create-drop, validate, update)
#validate: validate the schema, makes no changes to the database.
#update: update the schema.
#create: creates the schema, destroying previous data.
#create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
#none: does nothing with the schema, makes no changes to the database
spring.datasource.initialization-mode=always
spring.jpa.hibernate.ddl-auto=update 
#spring.jpa.hibernate.ddl-auto=none
#relate to @Entity :: none will not auto mapping the class and database tables
# I am in branch








